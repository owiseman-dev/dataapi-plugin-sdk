# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import plugin_service_pb2 as plugin__service__pb2

GRPC_GENERATED_VERSION = '1.64.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in plugin_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class PluginServiceStub(object):
    """插件服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterPlugin = channel.unary_unary(
                '/plugin.PluginService/RegisterPlugin',
                request_serializer=plugin__service__pb2.PluginRegistration.SerializeToString,
                response_deserializer=plugin__service__pb2.RegistrationResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/plugin.PluginService/Heartbeat',
                request_serializer=plugin__service__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.HeartbeatResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/plugin.PluginService/GetStatus',
                request_serializer=plugin__service__pb2.StatusRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.StatusResponse.FromString,
                _registered_method=True)
        self.ExecuteCommand = channel.unary_unary(
                '/plugin.PluginService/ExecuteCommand',
                request_serializer=plugin__service__pb2.CommandRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.CommandResponse.FromString,
                _registered_method=True)
        self.StopPlugin = channel.unary_unary(
                '/plugin.PluginService/StopPlugin',
                request_serializer=plugin__service__pb2.StopRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.StopResponse.FromString,
                _registered_method=True)
        self.FindPlugin = channel.unary_unary(
                '/plugin.PluginService/FindPlugin',
                request_serializer=plugin__service__pb2.FindPluginRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.FindPluginResponse.FromString,
                _registered_method=True)
        self.UpdatePlugin = channel.unary_unary(
                '/plugin.PluginService/UpdatePlugin',
                request_serializer=plugin__service__pb2.UpdatePluginRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.UpdatePluginResponse.FromString,
                _registered_method=True)
        self.GetPluginByName = channel.unary_unary(
                '/plugin.PluginService/GetPluginByName',
                request_serializer=plugin__service__pb2.GetPluginByNameRequest.SerializeToString,
                response_deserializer=plugin__service__pb2.GetPluginByNameResponse.FromString,
                _registered_method=True)


class PluginServiceServicer(object):
    """插件服务定义
    """

    def RegisterPlugin(self, request, context):
        """注册插件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """心跳检测
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """获取插件状态
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteCommand(self, request, context):
        """执行插件命令
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopPlugin(self, request, context):
        """停止插件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindPlugin(self, request, context):
        """查找和更新的方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdatePlugin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPluginByName(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PluginServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterPlugin,
                    request_deserializer=plugin__service__pb2.PluginRegistration.FromString,
                    response_serializer=plugin__service__pb2.RegistrationResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=plugin__service__pb2.HeartbeatRequest.FromString,
                    response_serializer=plugin__service__pb2.HeartbeatResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=plugin__service__pb2.StatusRequest.FromString,
                    response_serializer=plugin__service__pb2.StatusResponse.SerializeToString,
            ),
            'ExecuteCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteCommand,
                    request_deserializer=plugin__service__pb2.CommandRequest.FromString,
                    response_serializer=plugin__service__pb2.CommandResponse.SerializeToString,
            ),
            'StopPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.StopPlugin,
                    request_deserializer=plugin__service__pb2.StopRequest.FromString,
                    response_serializer=plugin__service__pb2.StopResponse.SerializeToString,
            ),
            'FindPlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.FindPlugin,
                    request_deserializer=plugin__service__pb2.FindPluginRequest.FromString,
                    response_serializer=plugin__service__pb2.FindPluginResponse.SerializeToString,
            ),
            'UpdatePlugin': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdatePlugin,
                    request_deserializer=plugin__service__pb2.UpdatePluginRequest.FromString,
                    response_serializer=plugin__service__pb2.UpdatePluginResponse.SerializeToString,
            ),
            'GetPluginByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPluginByName,
                    request_deserializer=plugin__service__pb2.GetPluginByNameRequest.FromString,
                    response_serializer=plugin__service__pb2.GetPluginByNameResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'plugin.PluginService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('plugin.PluginService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class PluginService(object):
    """插件服务定义
    """

    @staticmethod
    def RegisterPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/RegisterPlugin',
            plugin__service__pb2.PluginRegistration.SerializeToString,
            plugin__service__pb2.RegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/Heartbeat',
            plugin__service__pb2.HeartbeatRequest.SerializeToString,
            plugin__service__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/GetStatus',
            plugin__service__pb2.StatusRequest.SerializeToString,
            plugin__service__pb2.StatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/ExecuteCommand',
            plugin__service__pb2.CommandRequest.SerializeToString,
            plugin__service__pb2.CommandResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/StopPlugin',
            plugin__service__pb2.StopRequest.SerializeToString,
            plugin__service__pb2.StopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FindPlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/FindPlugin',
            plugin__service__pb2.FindPluginRequest.SerializeToString,
            plugin__service__pb2.FindPluginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdatePlugin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/UpdatePlugin',
            plugin__service__pb2.UpdatePluginRequest.SerializeToString,
            plugin__service__pb2.UpdatePluginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPluginByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/plugin.PluginService/GetPluginByName',
            plugin__service__pb2.GetPluginByNameRequest.SerializeToString,
            plugin__service__pb2.GetPluginByNameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
